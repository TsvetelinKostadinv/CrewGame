/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'eclipse'

sourceCompatibility = 11
targetCompatibility = 11

archivesBaseName = 'CrewGame'
version = '0.0.0.644' 

sourceSets
{

    main.java.srcDir 'src/main/java'

    test.java.srcDir 'src/test/java'

}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}

repositories
{
    mavenCentral()
}

dependencies
{
	compile 'junit:junit:4.12'
	
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.0.0'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.0.0'
}


jar {
    manifest {
        attributes(
            'Built-By'       : System.properties['user.name'],
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})"
        )
    }
}

test {
	useJUnitPlatform()

	reports {
        junitXml.enabled = false
        html.enabled = true
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

ext.assembleNextVersionNumber = { oldVersion ->

	def parts = oldVersion.tokenize(".")
	int buildCode = parts[parts.size()-1] as Integer

	buildCode+=1

	return parts[0] + '.' + parts[1] + '.' + parts[2] + '.' + buildCode
}

task incrementVersion{
	String newVersion = assembleNextVersionNumber(version)
	def s = buildFile.getText().replaceFirst("version = '$version'", "version = '" + newVersion + "'")
	buildFile.setText(s)
}

build.dependsOn incrementVersion
